[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date within the migration file
# as well as the filename.
# string value is passed to dateutil.tz.gettz
# leave blank for localtime
# timezone =

# additional arguments, defaults to empty list
# filenames = []

# max length of the filename for autogenerate migrations.  Default is 20.
# file_name_length_limit = 20

# format string used to generate the migration filename.
# file_format = %%(rev)s_%%(slug)s

# can be "dot", "underscore", or "none"
# file_separator = dot

sqlalchemy.url=mysql+pymysql://root:QWE&qwe..123@192.168.74.129/spider

[alembic:env]
# default location of the env.py file within a project
# env_py_location = %(here)s/env.py

# this section configures the context
# a comma separated list of version locations
# version_locations = %(here)s/versions

# provide a sequence of sections for multiple databases
# each section will have the same configuration options as [alembic:env]
# and provide a way to target multiple databases with multiple
# scripts for an environment.
# multiple_databases =

[logging]
# Logging configuration
# Use fileConfig to load logging configuration from the .ini file
log_config = config:logger_alembic

# The below is the standard logging configuration, you can adjust as needed
# This will output the log to both the console and a file named alembic.log
# Use the 'alembic' logger and configure it
[loggers]
keys = root, alembic, sqlalchemy

[handlers]
keys = console, file

[formatters]
keys = generic

[logger_root]
level = NOTSET
handlers = console, file

# [logger_sqlalchemy]
# level = INFO
# handlers = console
# qualname = sqlalchemy.engine

[logger_alembic]
level = DEBUG
handlers = console, file
qualname = alembic
propagate = 0

[handler_console]
class = StreamHandler
args = (sys.stdout,)
level = DEBUG
formatter = generic

[handler_file]
class = FileHandler
args = ('logs/alembic.log', 'a')
level = DEBUG
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %Y-%m-%d %H:%M:%S
[post_write_hooks]
# post_write_hooks are hooks that are called when new revision scripts are written.
# They can be used to format code or run linters.
# Hooks are executed as part of the `revision` command, after all migrations are written
# and the `autogenerate` command completes.
# Example:
# hooks = black --skip-string-normalization -q %(filepath)s
# isort %(filepath)s
# You can add more hooks to run by separating them with a space.
# hooks =

# hook file containing the hook function that should be called
# when a new revision script is written
# post_write_hooks = %(here)s/myscript.sh

# Additional arguments to pass to the script.
# post_write_hooks_arguments = --skip-string-normalization -q %(filepath)s
